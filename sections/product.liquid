<!-- Product Page Container -->
<div class="product-page full-width">
  <!-- Atmospheric Background -->
  <div class="product-atmosphere">
    <div class="atmosphere-texture"></div>
    <div class="atmosphere-gradient"></div>
  </div>

  <div class="product-container">
    <!-- Product Images Section -->
    <div class="product-media">
      {% if product.images.size > 0 %}
        <!-- Desktop Grid View -->
        <div class="product-images-grid desktop-only">
          {% for image in product.images %}
            <div class="product-image-item">
              <div class="image-container">
                <img 
                  src="{{ image | image_url: width: 600 }}" 
                  alt="{{ image.alt | default: product.title }}"
                  class="product-grid-img"
                  loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                >
                
                <!-- Image Zoom Overlay -->
                <div class="image-zoom-overlay">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"/>
                    <path d="M21 21l-4.35-4.35"/>
                    <path d="M11 8v6M8 11h6"/>
                  </svg>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>
        
        <!-- Mobile Swiper View -->
        <div class="product-images-swiper mobile-only">
          <div class="swiper-container">
            <div class="swiper-wrapper">
              {% for image in product.images %}
                <div class="swiper-slide">
                  <div class="mobile-image-container">
                    <img 
                      src="{{ image | image_url: width: 800 }}" 
                      alt="{{ image.alt | default: product.title }}"
                      class="mobile-product-img"
                      loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                    >
                  </div>
                </div>
              {% endfor %}
            </div>
            
            <!-- Navigation Dots -->
            {% if product.images.size > 1 %}
              <div class="swiper-pagination"></div>
              
              <!-- Navigation Arrows -->
              <div class="swiper-button-prev">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="15,18 9,12 15,6"></polyline>
                </svg>
              </div>
              <div class="swiper-button-next">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="9,18 15,12 9,6"></polyline>
                </svg>
              </div>
            {% endif %}
          </div>
        </div>
      {% endif %}
    </div>

    <!-- Product Information Section -->
    <div class="product-details">
      <!-- Back Button -->
      <div class="product-back-button">
        <a href="javascript:history.back()" class="back-btn" id="back-to-collection">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
          <span class="back-text">Back to Collection</span>
        </a>
      </div>

      <!-- Product Header -->
      <div class="product-header">
        <h1 class="product-title">{{ product.title }}</h1>
        
        <!-- Product Price -->
        <div class="product-pricing">
          {% assign current_variant = product.selected_or_first_available_variant %}
          <span class="current-price" id="product-price">{{ current_variant.price | money }}</span>
          {% if current_variant.compare_at_price > current_variant.price %}
            <span class="original-price">{{ current_variant.compare_at_price | money }}</span>
            <span class="sale-badge">Sale</span>
          {% endif %}
        </div>
      </div>

      <!-- Product Form -->
      <div class="product-form-section">
        {% form 'product', product, class: 'product-form', id: 'product-form' %}
          {% assign current_variant = product.selected_or_first_available_variant %}
          
          <!-- Variant Selection -->
          {% unless product.has_only_default_variant %}
            <div class="product-variants">
              {% for option in product.options_with_values %}
                <div class="variant-option">
                  <div class="variant-buttons" data-option-index="{{ forloop.index0 }}">
                    {% for value in option.values %}
                      <button 
                        type="button"
                        class="variant-btn {% if option.selected_value == value %}active{% endif %}"
                        data-value="{{ value | escape }}"
                        data-option-name="{{ option.name | escape }}"
                      >
                        {{ value }}
                      </button>
                    {% endfor %}
                  </div>
                  <!-- Hidden select for form submission -->
                  <select 
                    class="variant-select" 
                    name="options[{{ option.name | escape }}]" 
                    data-option-index="{{ forloop.index0 }}"
                    style="display: none;"
                  >
                    {% for value in option.values %}
                      <option 
                        value="{{ value | escape }}"
                        {% if option.selected_value == value %}selected{% endif %}
                      >
                        {{ value }}
                      </option>
                    {% endfor %}
                  </select>
                </div>
              {% endfor %}
            </div>
          {% endunless %}

          <!-- Quantity and Add to Cart -->
          <div class="product-actions">
            <div class="quantity-selector">
              <label class="quantity-label">Quantity</label>
              <div class="quantity-input-container">
                <button type="button" class="quantity-btn quantity-minus" data-action="decrease">-</button>
                <input 
                  type="number" 
                  name="quantity" 
                  class="quantity-input" 
                  value="1" 
                  min="1" 
                  max="99"
                >
                <button type="button" class="quantity-btn quantity-plus" data-action="increase">+</button>
              </div>
            </div>

            <div class="add-to-cart-section">
              <select name="id" class="variant-id" style="display: none;">
                {% for variant in product.variants %}
                  <option 
                    value="{{ variant.id }}"
                    {% if variant == current_variant %}selected{% endif %}
                    data-available="{{ variant.available }}"
                    data-price="{{ variant.price }}"
                    data-compare-price="{{ variant.compare_at_price }}"
                  >
                    {{ variant.title }}
                  </option>
                {% endfor %}
              </select>

              <button 
                type="submit" 
                class="add-to-cart-btn"
                {% unless current_variant.available %}disabled{% endunless %}
              >
                <span class="btn-text">
                  {% if current_variant.available %}
                    Add to Cart
                  {% else %}
                    Sold Out
                  {% endif %}
                </span>
                <span class="btn-icon">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="9" cy="21" r="1"/>
                    <circle cx="20" cy="21" r="1"/>
                    <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"/>
                  </svg>
                </span>
              </button>

              <!-- Smart Payment Buttons -->
              <div class="smart-payment-buttons">
                {% if shop.enabled_payment_types.size > 0 %}
                  {{ form | payment_button }}
                {% endif %}
              </div>
            </div>
          </div>
        {% endform %}
      </div>

      <!-- Product Description -->
      {% if product.description != blank %}
        <div class="product-description">
          {{ product.description }}
        </div>
      {% endif %}

      <!-- Product Meta Information -->
      {% if product.type != blank or product.tags.size > 0 %}
        <div class="product-meta">
          {% if product.type != blank %}
            <div class="meta-item">
              <span class="meta-label">Type:</span>
              <span class="meta-value">{{ product.type }}</span>
            </div>
          {% endif %}
          {% if product.tags.size > 0 %}
            <div class="meta-item">
              <span class="meta-label">Tags:</span>
              <div class="product-tags">
                {% for tag in product.tags limit: 5 %}
                  <span class="tag">{{ tag }}</span>
                {% endfor %}
              </div>
            </div>
          {% endif %}
        </div>
      {% endif %}
    </div>
  </div>
</div>

<!-- JavaScript for Product Functionality -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Smart back button functionality
  const backBtn = document.getElementById('back-to-collection');
  const backText = document.querySelector('.back-text');
  
  if (backBtn && backText) {
    // Check if user came from a collection
    const referrer = document.referrer;
    const currentDomain = window.location.origin;
    
    if (referrer && referrer.startsWith(currentDomain)) {
      const referrerPath = new URL(referrer).pathname;
      
      // Check if referrer is a collection page
      if (referrerPath.includes('/collections/')) {
        const collectionName = referrerPath.split('/collections/')[1];
        if (collectionName && collectionName !== 'all') {
          // Format collection name
          const formattedName = collectionName
            .split('-')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
          backText.textContent = `Back to ${formattedName}`;
        }
      } else if (referrerPath.includes('/search')) {
        backText.textContent = 'Back to Search Results';
      }
    } else {
      // If no referrer or external referrer, link to all products
      backBtn.href = '/collections/all';
      backText.textContent = 'Browse All Products';
    }
  }
  // Product variant handling
  const variantSelects = document.querySelectorAll('.variant-select');
  const variantIdSelect = document.querySelector('.variant-id');
  const priceElement = document.getElementById('product-price');
  const addToCartBtn = document.querySelector('.add-to-cart-btn');
  const mainImage = document.getElementById('main-product-image');
  
  // Mobile Swiper Functionality
  const swiperContainer = document.querySelector('.swiper-container');
  if (swiperContainer) {
    let currentSlide = 0;
    const slides = document.querySelectorAll('.swiper-slide');
    const totalSlides = slides.length;
    const swiperWrapper = document.querySelector('.swiper-wrapper');
    const pagination = document.querySelector('.swiper-pagination');
    const prevBtn = document.querySelector('.swiper-button-prev');
    const nextBtn = document.querySelector('.swiper-button-next');
    
    // Create pagination dots
    if (pagination && totalSlides > 1) {
      for (let i = 0; i < totalSlides; i++) {
        const dot = document.createElement('span');
        dot.classList.add('pagination-dot');
        if (i === 0) dot.classList.add('active');
        dot.addEventListener('click', () => goToSlide(i));
        pagination.appendChild(dot);
      }
    }
    
    // Update slide position
    function updateSlide() {
      if (swiperWrapper) {
        swiperWrapper.style.transform = `translateX(-${currentSlide * 100}%)`;
        
        // Update pagination dots
        document.querySelectorAll('.pagination-dot').forEach((dot, index) => {
          dot.classList.toggle('active', index === currentSlide);
        });
      }
    }
    
    // Go to specific slide
    function goToSlide(index) {
      currentSlide = Math.max(0, Math.min(index, totalSlides - 1));
      updateSlide();
    }
    
    // Previous slide
    function prevSlide() {
      if (currentSlide > 0) {
        currentSlide = currentSlide - 1;
      } else {
        currentSlide = totalSlides - 1;
      }
      updateSlide();
    }
    
    // Next slide
    function nextSlide() {
      if (currentSlide < totalSlides - 1) {
        currentSlide = currentSlide + 1;
      } else {
        currentSlide = 0;
      }
      updateSlide();
    }
    
    // Button event listeners
    if (prevBtn) prevBtn.addEventListener('click', prevSlide);
    if (nextBtn) nextBtn.addEventListener('click', nextSlide);
    
    // Touch/swipe functionality
    let startX = 0;
    let currentX = 0;
    let isDragging = false;
    let hasSwiped = false;
    
    swiperContainer.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
      currentX = startX;
      isDragging = true;
      hasSwiped = false;
    });
    
    swiperContainer.addEventListener('touchmove', (e) => {
      if (!isDragging) return;
      e.preventDefault();
      currentX = e.touches[0].clientX;
    });
    
    swiperContainer.addEventListener('touchend', (e) => {
      if (!isDragging || hasSwiped) {
        isDragging = false;
        return;
      }
      
      const diff = startX - currentX;
      const threshold = 50; // Minimum swipe distance
      
      if (Math.abs(diff) > threshold) {
        if (diff > 0) {
          // Swiped left - go to next slide
          nextSlide();
        } else {
          // Swiped right - go to previous slide
          prevSlide();
        }
        hasSwiped = true;
      }
      
      isDragging = false;
    });
    
    // Mouse drag functionality for desktop testing
    swiperContainer.addEventListener('mousedown', (e) => {
      startX = e.clientX;
      currentX = startX;
      isDragging = true;
      hasSwiped = false;
      e.preventDefault();
    });
    
    swiperContainer.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      e.preventDefault();
      currentX = e.clientX;
    });
    
    swiperContainer.addEventListener('mouseup', () => {
      if (!isDragging || hasSwiped) {
        isDragging = false;
        return;
      }
      
      const diff = startX - currentX;
      const threshold = 50;
      
      if (Math.abs(diff) > threshold) {
        if (diff > 0) {
          // Dragged left - go to next slide
          nextSlide();
        } else {
          // Dragged right - go to previous slide
          prevSlide();
        }
        hasSwiped = true;
      }
      
      isDragging = false;
    });
  }
  
  // Quantity controls
  const quantityInput = document.querySelector('.quantity-input');
  const quantityBtns = document.querySelectorAll('.quantity-btn');
  
  quantityBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      const action = this.dataset.action;
      let currentValue = parseInt(quantityInput.value) || 1;
      
      if (action === 'increase' && currentValue < 99) {
        quantityInput.value = currentValue + 1;
      } else if (action === 'decrease' && currentValue > 1) {
        quantityInput.value = currentValue - 1;
      }
    });
  });
  
  // Variant button handling
  const variantBtns = document.querySelectorAll('.variant-btn');
  
  variantBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      const value = this.dataset.value;
      const optionName = this.dataset.optionName;
      const container = this.closest('.variant-option');
      const hiddenSelect = container.querySelector('.variant-select');
      
      // Update button states
      container.querySelectorAll('.variant-btn').forEach(b => b.classList.remove('active'));
      this.classList.add('active');
      
      // Update hidden select
      if (hiddenSelect) {
        hiddenSelect.value = value;
      }
      
      // Update variant
      updateVariant();
    });
  });
  
  // Variant selection handling
  function updateVariant() {
    if (!variantIdSelect) return;
    
    const selectedOptions = Array.from(variantSelects).map(select => select.value);
    const matchingVariant = Array.from(variantIdSelect.options).find(option => {
      const variantTitle = option.textContent.trim();
      return selectedOptions.every(selectedOption => 
        variantTitle.includes(selectedOption)
      );
    });
    
    if (matchingVariant) {
      variantIdSelect.value = matchingVariant.value;
      
      // Update price
      const price = matchingVariant.dataset.price;
      if (priceElement && price) {
        // Format price (basic formatting, adjust as needed)
        const formattedPrice = '$' + (parseInt(price) / 100).toFixed(2);
        priceElement.textContent = formattedPrice;
      }
      
      // Update button state
      const isAvailable = matchingVariant.dataset.available === 'true';
      if (addToCartBtn) {
        addToCartBtn.disabled = !isAvailable;
        const btnText = addToCartBtn.querySelector('.btn-text');
        if (btnText) {
          btnText.textContent = isAvailable ? 'Add to Cart' : 'Sold Out';
        }
      }
    }
  }
  
  variantSelects.forEach(select => {
    select.addEventListener('change', updateVariant);
  });

  // AJAX Add to Cart
  const productForm = document.getElementById('product-form');
  if (productForm) {
    productForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(productForm);
      const addToCartData = {
        id: formData.get('id'),
        quantity: parseInt(formData.get('quantity')) || 1
      };

      // Add variant options if they exist
      const variantSelects = productForm.querySelectorAll('.variant-select');
      variantSelects.forEach(select => {
        if (select.name && select.value) {
          addToCartData[select.name] = select.value;
        }
      });

      try {
        addToCartBtn.disabled = true;
        addToCartBtn.querySelector('.btn-text').textContent = 'Adding...';
        
        await window.addToCart(addToCartData);
        
        // Reset button
        addToCartBtn.disabled = false;
        addToCartBtn.querySelector('.btn-text').textContent = 'Add to Cart';
        
      } catch (error) {
        console.error('Error adding to cart:', error);
        addToCartBtn.disabled = false;
        addToCartBtn.querySelector('.btn-text').textContent = 'Add to Cart';
        alert('Error adding item to cart. Please try again.');
      }
    });
  }

  // Image Zoom Functionality
  function initImageZoom() {
    const zoomOverlays = document.querySelectorAll('.image-zoom-overlay');
    
    zoomOverlays.forEach((overlay, index) => {
      overlay.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        openImageModal(index);
      });
    });
  }

  function openImageModal(currentIndex = 0) {
    // Get all product images
    const allImages = document.querySelectorAll('.product-grid-img');
    const imageUrls = Array.from(allImages).map(img => 
      img.src.replace('width=600', 'width=1200')
    );
    
    if (imageUrls.length === 0) return;
    
    let activeIndex = currentIndex;
    
    // Create modal container
    const modal = document.createElement('div');
    modal.className = 'image-zoom-modal';
    modal.innerHTML = `
      <div class="zoom-modal-backdrop"></div>
      <div class="zoom-modal-content">
        <button class="zoom-close-btn" aria-label="Close">&times;</button>
        <div class="zoom-image-container">
          <img src="${imageUrls[activeIndex]}" alt="Product Image" class="zoom-image">
        </div>
        <div class="zoom-navigation" ${imageUrls.length <= 1 ? 'style="display: none;"' : ''}>
          <button class="zoom-prev-btn" aria-label="Previous Image">‹</button>
          <button class="zoom-next-btn" aria-label="Next Image">›</button>
        </div>
        <div class="zoom-counter" ${imageUrls.length <= 1 ? 'style="display: none;"' : ''}>
          <span class="current-image">${activeIndex + 1}</span> / <span class="total-images">${imageUrls.length}</span>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    document.body.style.overflow = 'hidden';
    
    const zoomImage = modal.querySelector('.zoom-image');
    const currentImageSpan = modal.querySelector('.current-image');
    const prevBtn = modal.querySelector('.zoom-prev-btn');
    const nextBtn = modal.querySelector('.zoom-next-btn');
    
    // Update image function
    const updateImage = (index) => {
      activeIndex = index;
      zoomImage.src = imageUrls[activeIndex];
      if (currentImageSpan) {
        currentImageSpan.textContent = activeIndex + 1;
      }
    };
    
    // Navigation functions
    const showPrevImage = () => {
      const newIndex = activeIndex > 0 ? activeIndex - 1 : imageUrls.length - 1;
      updateImage(newIndex);
    };
    
    const showNextImage = () => {
      const newIndex = activeIndex < imageUrls.length - 1 ? activeIndex + 1 : 0;
      updateImage(newIndex);
    };
    
    // Navigation event listeners
    if (prevBtn) prevBtn.addEventListener('click', showPrevImage);
    if (nextBtn) nextBtn.addEventListener('click', showNextImage);
    
    // Close modal functionality
    const closeBtn = modal.querySelector('.zoom-close-btn');
    const backdrop = modal.querySelector('.zoom-modal-backdrop');
    
    const closeModal = () => {
      document.body.removeChild(modal);
      document.body.style.overflow = '';
      document.removeEventListener('keydown', handleKeydown);
    };
    
    closeBtn.addEventListener('click', closeModal);
    backdrop.addEventListener('click', closeModal);
    
    // Keyboard navigation
    const handleKeydown = (e) => {
      if (e.key === 'Escape') {
        closeModal();
      } else if (e.key === 'ArrowLeft') {
        showPrevImage();
      } else if (e.key === 'ArrowRight') {
        showNextImage();
      }
    };
    
    document.addEventListener('keydown', handleKeydown);
    
    // Show modal
    requestAnimationFrame(() => {
      modal.classList.add('active');
    });
  }

  // Initialize zoom functionality
  initImageZoom();
});
</script>

{% stylesheet %}
  /* Product Page Styles */
  .product-page {
    position: relative;
    min-height: 100vh;
    background-color: var(--color-background);
    overflow: hidden;
  }
  
  /* Atmospheric Background */
  .product-atmosphere {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
  }
  
  .atmosphere-texture {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
      radial-gradient(circle at 20% 30%, rgba(215, 38, 56, 0.02) 0.5px, transparent 0.5px),
      radial-gradient(circle at 80% 70%, rgba(215, 38, 56, 0.015) 0.5px, transparent 0.5px),
      radial-gradient(circle at 40% 80%, rgba(215, 38, 56, 0.01) 1px, transparent 1px);
    background-size: 25px 25px, 35px 35px, 50px 50px;
    animation: atmosphereShift 80s linear infinite;
    opacity: 0.4;
  }
  
  .atmosphere-gradient {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(ellipse at center, 
      rgba(215, 38, 56, 0.008) 0%, 
      rgba(215, 38, 56, 0.003) 40%, 
      transparent 70%);
  }
  
  /* Product Container */
  .product-container {
    position: relative;
    width: 100%;
    padding: 3rem 2rem;
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 4rem;
    align-items: start;
    z-index: 2;
  }
  
  /* Product Media Section */
  .product-media {
    position: relative;
    min-height: 1200px;
  }
  
  .product-images-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-auto-rows: minmax(600px, auto);
    gap: 1rem;
    width: 100%;
    min-height: 1200px;
  }
  
  .product-image-item {
    position: relative;
    background-color: var(--color-background-ui);
    border-radius: 0;
    overflow: hidden;
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.3),
      0 4px 16px rgba(0, 0, 0, 0.2),
      inset 0 1px 0 rgba(215, 38, 56, 0.02);
    border: 2px solid rgba(215, 38, 56, 0.05);
    transition: all 0.3s ease;
    min-height: 600px;
  }
  
  .product-image-item:hover {
    transform: translateY(-4px);
    box-shadow: 
      0 12px 40px rgba(0, 0, 0, 0.4),
      0 6px 20px rgba(0, 0, 0, 0.3),
      inset 0 1px 0 rgba(215, 38, 56, 0.04);
    border-color: rgba(215, 38, 56, 0.1);
  }
  
  .image-container {
    position: relative;
    aspect-ratio: 3/4;
    overflow: hidden;
  }
  
  .product-grid-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .image-zoom-overlay {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
    width: 36px;
    height: 36px;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-foreground);
    opacity: 0;
    transition: opacity 0.3s ease;
    cursor: pointer;
    backdrop-filter: blur(10px);
  }
  
  .image-container:hover .image-zoom-overlay {
    opacity: 1;
  }
  
  .image-container:hover .product-grid-img {
    transform: scale(1.05);
  }
  
  /* Mobile Swiper Styles */
  .product-page .mobile-only {
    display: none !important;
  }
  
  .product-page .desktop-only {
    display: block !important;
  }
  
  /* Ensure product images grid displays properly on desktop */
  .product-images-grid.desktop-only {
    display: grid !important;
    grid-template-columns: repeat(2, 1fr) !important;
    gap: 1rem !important;
    width: 100% !important;
  }
  
  /* Hide mobile swiper by default */
  .product-images-swiper.mobile-only {
    display: none !important;
  }
  
  /* Desktop specific rules for product page */
  @media (min-width: 769px) {
    .product-page .desktop-only,
    .desktop-only {
      display: block !important;
      visibility: visible !important;
    }
    
    .product-page .mobile-only,
    .mobile-only,
    .product-images-swiper.mobile-only {
      display: none !important;
      visibility: hidden !important;
    }
    
    .product-page .product-images-grid.desktop-only,
    .product-images-grid.desktop-only {
      display: grid !important;
      grid-template-columns: repeat(2, 1fr) !important;
      gap: 1rem !important;
      visibility: visible !important;
    }
  }
  
  .product-images-swiper {
    position: relative;
    width: 100%;
    height: auto;
  }
  
  .swiper-container {
    position: relative;
    width: 100%;
    height: auto;
    overflow: hidden;
    border-radius: 8px;
    background-color: var(--color-background-ui);
    border: 2px solid rgba(215, 38, 56, 0.05);
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.3),
      0 4px 16px rgba(0, 0, 0, 0.2);
  }
  
  .swiper-wrapper {
    display: flex;
    width: 100%;
    height: auto;
    transition: transform 0.3s ease;
  }
  
  .swiper-slide {
    flex: 0 0 100%;
    width: 100%;
    height: auto;
  }
  
  .mobile-image-container {
    position: relative;
    width: 100%;
    aspect-ratio: 2/3;
    overflow: hidden;
  }
  
  .mobile-product-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  /* Swiper Navigation */
  .swiper-button-prev,
  .swiper-button-next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 44px;
    height: 44px;
    background: rgba(0, 0, 0, 0.6);
    color: var(--color-foreground);
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }
  
  .swiper-button-prev {
    left: 1rem;
  }
  
  .swiper-button-next {
    right: 1rem;
  }
  
  .swiper-button-prev:hover,
  .swiper-button-next:hover {
    background: rgba(215, 38, 56, 0.8);
    transform: translateY(-50%) scale(1.1);
  }
  
  /* Swiper Pagination */
  .swiper-pagination {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.5rem;
    z-index: 10;
  }
  
  .pagination-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .pagination-dot.active {
    background: rgba(215, 38, 56, 0.9);
    transform: scale(1.2);
  }
  
  .pagination-dot:hover {
    background: rgba(215, 38, 56, 0.7);
  }
  
  /* Product Details Section */
  .product-details {
    padding: 1rem 0;
  }
  
  /* Back Button */
  .product-back-button {
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  .back-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    background-color: var(--color-background-ui);
    border: 2px solid rgba(215, 38, 56, 0.1);
    border-radius: 6px;
    color: var(--color-foreground);
    font-family: 'Oswald', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    text-decoration: none;
    transition: all 0.3s ease;
    cursor: pointer;
  }
  
  .back-btn:hover {
    background: linear-gradient(135deg, 
      rgba(215, 38, 56, 0.1) 0%, 
      rgba(160, 27, 42, 0.15) 100%);
    border-color: rgba(215, 38, 56, 0.3);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .back-btn svg {
    transition: transform 0.3s ease;
  }
  
  .back-btn:hover svg {
    transform: translateX(-2px);
  }
  
  .product-header {
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid rgba(215, 38, 56, 0.1);
  }
  
  .product-title,
  .product-header .product-title,
  h1.product-title {
    font-family: 'EB Garamond', serif !important;
    font-size: 1.5rem !important;
    font-weight: 600 !important;
    color: var(--color-foreground) !important;
    text-transform: none !important;
    letter-spacing: 0 !important;
    margin-bottom: 1rem !important;
    line-height: 1.2 !important;
  }
  
  .product-pricing {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
  }
  
  .current-price {
    font-family: 'Oswald', sans-serif;
    font-size: 1.25rem;
    font-weight: 500;
    color: var(--color-foreground);
  }
  
  .original-price {
    font-family: 'Oswald', sans-serif;
    font-size: 1rem;
    font-weight: 400;
    color: var(--color-foreground);
    opacity: 0.6;
    text-decoration: line-through;
  }
  
  .sale-badge {
    background: linear-gradient(135deg, 
      rgba(215, 38, 56, 0.9) 0%, 
      rgba(160, 27, 42, 0.95) 100%);
    color: var(--color-foreground);
    font-family: 'Oswald', sans-serif;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    box-shadow: 0 2px 8px rgba(215, 38, 56, 0.3);
  }
  
  .product-description {
    font-family: 'Oswald', sans-serif;
    font-size: 1rem;
    font-weight: 300;
    color: var(--color-foreground);
    line-height: 1.6;
    margin-bottom: 2.5rem;
    opacity: 0.8;
  }
  
  .product-description p {
    margin-bottom: 1rem;
  }
  
  /* Sizing Chart & Table Styling */
  .product-description table {
    width: 100%;
    border-collapse: collapse;
    margin: 1.5rem 0;
    background-color: var(--color-background-ui);
    border: 2px solid rgba(215, 38, 56, 0.1);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }
  
  .product-description th,
  .product-description td {
    padding: 0.75rem 1rem !important;
    text-align: left;
    border: 1px solid rgba(215, 38, 56, 0.2) !important;
    color: var(--color-foreground) !important;
    font-family: 'Oswald', sans-serif !important;
    font-weight: 400 !important;
    background-color: var(--color-background-ui) !important;
  }
  
  .product-description th {
    background: linear-gradient(135deg, 
      rgba(215, 38, 56, 0.1) 0%, 
      rgba(160, 27, 42, 0.15) 100%) !important;
    font-weight: 600 !important;
    text-transform: uppercase !important;
    letter-spacing: 0.05em !important;
    font-size: 0.9rem !important;
    border: 1px solid rgba(215, 38, 56, 0.3) !important;
  }
  
  .product-description td {
    font-size: 0.9rem !important;
    font-weight: 300 !important;
  }
  
  /* Remove the border removal rule to keep all borders visible */
  
  .product-description tr:hover {
    background-color: rgba(215, 38, 56, 0.05);
  }
  
  /* Force override all table styling */
  .product-description table,
  .product-description table *,
  .product-description tbody,
  .product-description tbody *,
  .product-description tr,
  .product-description tr * {
    color: var(--color-foreground) !important;
    background-color: var(--color-background-ui) !important;
    border-color: rgba(215, 38, 56, 0.2) !important;
  }
  
  /* Force header styling */
  .product-description thead,
  .product-description thead *,
  .product-description th,
  .product-description th * {
    background: linear-gradient(135deg, 
      rgba(215, 38, 56, 0.1) 0%, 
      rgba(160, 27, 42, 0.15) 100%) !important;
    color: var(--color-foreground) !important;
    border-color: rgba(215, 38, 56, 0.3) !important;
  }
  
  /* Handle embedded images in descriptions */
  .product-description img {
    max-width: 100%;
    height: auto;
    margin: 1rem 0;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    background-color: var(--color-background-ui);
    padding: 1rem;
  }
  
  /* Product Form */
  .product-form-section {
    margin-bottom: 2.5rem;
  }
  
  .product-variants {
    margin-bottom: 2rem;
  }
  
  .variant-option {
    margin-bottom: 1.5rem;
  }
  
  .variant-buttons {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
    width: 100%;
  }
  
  .variant-btn {
    position: relative;
    background-color: var(--color-background-ui);
    border: 2px solid rgba(215, 38, 56, 0.1);
    border-radius: 6px;
    padding: 0.75rem 1.25rem;
    color: var(--color-foreground);
    font-family: 'Oswald', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    cursor: pointer;
    transition: all 0.3s ease;
    flex: 1;
    min-width: 60px;
    text-align: center;
  }
  
  .variant-btn:hover {
    border-color: rgba(215, 38, 56, 0.3);
    background-color: rgba(215, 38, 56, 0.05);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .variant-btn.active {
    background: linear-gradient(135deg, 
      rgba(215, 38, 56, 0.2) 0%, 
      rgba(160, 27, 42, 0.25) 100%);
    border-color: rgba(215, 38, 56, 0.4);
    color: var(--color-foreground);
    box-shadow: 
      0 0 0 1px rgba(215, 38, 56, 0.2),
      0 4px 12px rgba(215, 38, 56, 0.2);
  }
  
  .variant-btn.active:hover {
    background: linear-gradient(135deg, 
      rgba(215, 38, 56, 0.3) 0%, 
      rgba(160, 27, 42, 0.35) 100%);
    transform: translateY(-2px);
    box-shadow: 
      0 0 0 1px rgba(215, 38, 56, 0.3),
      0 6px 16px rgba(215, 38, 56, 0.3);
  }
  
  /* Product Actions */
  .product-actions {
    display: grid;
    gap: 1.5rem;
  }
  
  .quantity-selector {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .quantity-label {
    font-family: 'Oswald', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--color-foreground);
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }
  
  .quantity-input-container {
    display: flex;
    align-items: center;
    width: fit-content;
    background-color: var(--color-background-ui);
    border: 2px solid rgba(215, 38, 56, 0.1);
    border-radius: 6px;
    overflow: hidden;
  }
  
  .quantity-btn {
    width: 40px;
    height: 40px;
    background: transparent;
    border: none;
    color: var(--color-foreground);
    font-size: 1.2rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .quantity-btn:hover {
    background-color: rgba(215, 38, 56, 0.1);
  }
  
  .quantity-input {
    width: 60px;
    height: 40px;
    border: none;
    background: transparent;
    color: var(--color-foreground);
    font-family: 'Oswald', sans-serif;
    font-size: 0.9rem;
    text-align: center;
    outline: none;
  }
  
  /* Add to Cart Section */
  .add-to-cart-section {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .add-to-cart-btn {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 1.25rem 2.5rem;
    width: 100%;
    background: linear-gradient(135deg, 
      rgba(215, 38, 56, 0.4) 0%, 
      rgba(160, 27, 42, 0.5) 100%);
    color: var(--color-foreground);
    font-family: 'Oswald', sans-serif;
    font-size: 1rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 
      0 8px 25px rgba(215, 38, 56, 0.15),
      0 4px 10px rgba(0, 0, 0, 0.2);
  }
  
  .add-to-cart-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 
      0 12px 35px rgba(215, 38, 56, 0.2),
      0 6px 15px rgba(0, 0, 0, 0.3);
  }
  
  .add-to-cart-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    background: linear-gradient(135deg, 
      rgba(100, 100, 100, 0.6) 0%, 
      rgba(80, 80, 80, 0.7) 100%);
  }
  
  .smart-payment-buttons {
    margin-top: 0.75rem;
  }
  
  .smart-payment-buttons .shopify-payment-button {
    width: 100%;
  }
  
  .smart-payment-buttons .shopify-payment-button__button {
    width: 100% !important;
    border-radius: 6px !important;
    font-family: 'Oswald', sans-serif !important;
    font-weight: 500 !important;
    text-transform: uppercase !important;
    letter-spacing: 0.05em !important;
    transition: all 0.3s ease !important;
  }
  
  .smart-payment-buttons .shopify-payment-button__button:hover {
    transform: translateY(-1px) !important;
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2) !important;
  }
  
  .smart-payment-buttons .shopify-payment-button__more-options {
    font-family: 'Oswald', sans-serif !important;
    font-size: 0.85rem !important;
    font-weight: 400 !important;
    color: var(--color-foreground) !important;
    opacity: 0.7 !important;
    text-align: center !important;
    margin-top: 0.75rem !important;
    text-decoration: none !important;
    transition: opacity 0.3s ease !important;
  }
  
  .smart-payment-buttons .shopify-payment-button__more-options:hover {
    opacity: 1 !important;
  }
  
  /* Product Meta */
  .product-meta {
    padding-top: 2rem;
    border-top: 1px solid rgba(215, 38, 56, 0.1);
  }
  
  .meta-item {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
    flex-wrap: wrap;
  }
  
  .meta-label {
    font-family: 'Oswald', sans-serif;
    font-size: 0.85rem;
    font-weight: 500;
    color: var(--color-foreground);
    text-transform: uppercase;
    letter-spacing: 0.1em;
    opacity: 0.7;
    min-width: 60px;
  }
  
  .meta-value {
    font-family: 'Oswald', sans-serif;
    font-size: 0.85rem;
    font-weight: 300;
    color: var(--color-foreground);
  }
  
  .product-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }
  
  .tag {
    background-color: var(--color-background-ui);
    color: var(--color-foreground);
    font-family: 'Oswald', sans-serif;
    font-size: 0.75rem;
    font-weight: 400;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    border: 1px solid rgba(215, 38, 56, 0.1);
  }
  
  /* Animations */
  @keyframes atmosphereShift {
    0% {
      background-position: 0px 0px, 0px 0px, 0px 0px;
    }
    100% {
      background-position: 25px 25px, -35px 35px, 50px -50px;
    }
  }
  
  /* Responsive Design */
  @media (max-width: 1024px) {
    .product-container {
      grid-template-columns: 1fr;
      gap: 2.5rem;
      padding: 2rem 1.5rem;
    }
    
    .product-media {
      position: static;
    }
    
    .product-images-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.75rem;
    }
  }
  
  @media (max-width: 768px) {
    .product-container {
      padding: 0.5rem 1rem;
      gap: 0;
    }
    
    .product-back-button {
      margin-top: -2.5rem;
      margin-bottom: 0.5rem;
    }
    
    .product-details {
      padding: 0;
    }
    
    .product-header {
      margin-bottom: 1rem;
      padding-bottom: 1rem;
    }
    
    .product-title,
    .product-header .product-title,
    h1.product-title {
      font-size: 1.5rem !important;
      margin-bottom: 0.5rem !important;
    }
    
    .current-price {
      font-size: 1.15rem;
    }
    
    .product-form-section {
      margin-bottom: 1.5rem;
    }
    
    .product-variants {
      margin-bottom: 1rem;
    }
    
    .product-actions {
      gap: 1rem;
    }
    
    .product-description {
      margin-bottom: 1.5rem;
    }
    
    /* Mobile sizing chart fixes */
    .product-description {
      max-width: 100% !important;
      overflow-x: hidden !important;
    }
    
    /* Create a scrollable container for tables only */
    .product-description table {
      display: block !important;
      overflow-x: auto !important;
      overflow-y: hidden !important;
      -webkit-overflow-scrolling: touch !important;
      max-width: calc(100vw - 2rem) !important;
      width: 100% !important;
      margin: 1rem 0 !important;
      white-space: nowrap !important;
      height: auto !important;
      max-height: none !important;
    }
    
    /* Restore table structure inside the scrollable container */
    .product-description table tbody,
    .product-description table thead,
    .product-description table tfoot {
      display: table-header-group !important;
      width: 100% !important;
    }
    
    .product-description table tbody {
      display: table-row-group !important;
    }
    
    .product-description table tr {
      display: table-row !important;
    }
    
    .product-description th,
    .product-description td {
      padding: 0.5rem 0.5rem !important;
      font-size: 0.7rem !important;
      min-width: 60px !important;
      max-width: none !important;
      white-space: nowrap !important;
      vertical-align: top !important;
      display: table-cell !important;
    }
    
    .product-description tbody,
    .product-description thead,
    .product-description tr {
      display: table-row !important;
      width: auto !important;
    }
    
    .product-description th,
    .product-description td {
      display: table-cell !important;
      width: auto !important;
    }
    
    /* Force hide desktop elements on mobile */
    .product-page .desktop-only,
    .desktop-only,
    .product-images-grid.desktop-only {
      display: none !important;
      visibility: hidden !important;
    }
    
    /* Force show mobile elements on mobile */
    .product-page .mobile-only,
    .mobile-only,
    .product-images-swiper.mobile-only {
      display: block !important;
      visibility: visible !important;
    }
    
    /* Ensure mobile swiper container displays correctly */
    .product-images-swiper {
      display: block !important;
    }
    
    .mobile-image-container {
      aspect-ratio: 3/4;
    }
    
    .swiper-button-prev,
    .swiper-button-next {
      width: 40px;
      height: 40px;
    }
    
    .swiper-button-prev {
      left: 0.75rem;
    }
    
    .swiper-button-next {
      right: 0.75rem;
    }
    
    .add-to-cart-btn {
      padding: 1rem 2rem;
      font-size: 0.9rem;
    }
    
    .variant-btn {
      padding: 0.6rem 1rem;
      font-size: 0.85rem;
    }
  }
  
  @media (max-width: 480px) {
    .product-container {
      padding: 1rem 0.75rem;
    }
    
    .product-pricing {
      flex-direction: column;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
    
    .product-actions {
      gap: 1rem;
    }
    
    .mobile-image-container {
      aspect-ratio: 3/4;
    }
    
    .swiper-button-prev,
    .swiper-button-next {
      width: 36px;
      height: 36px;
    }
    
    .swiper-button-prev {
      left: 0.5rem;
    }
    
    .swiper-button-next {
      right: 0.5rem;
    }
    
    .pagination-dot {
      width: 6px;
      height: 6px;
    }
  }

  /* Image Zoom Modal Styles */
  .image-zoom-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .image-zoom-modal.active {
    opacity: 1;
    visibility: visible;
  }

  .zoom-modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    cursor: pointer;
  }

  .zoom-modal-content {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    box-sizing: border-box;
  }

  .zoom-close-btn {
    position: absolute;
    top: 1rem;
    right: 1rem;
    width: 40px;
    height: 40px;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    color: white;
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
    z-index: 10001;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .zoom-close-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.5);
    transform: scale(1.1);
  }

  .zoom-image-container {
    max-width: 90%;
    max-height: 90%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .zoom-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    border-radius: 8px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
  }

  .zoom-navigation {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
    display: flex;
    justify-content: space-between;
    padding: 0 1rem;
    pointer-events: none;
  }

  .zoom-prev-btn,
  .zoom-next-btn {
    width: 50px;
    height: 50px;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    color: white;
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    pointer-events: auto;
    backdrop-filter: blur(10px);
  }

  .zoom-prev-btn:hover,
  .zoom-next-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.5);
    transform: scale(1.1);
  }

  .zoom-counter {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.6);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-family: 'Oswald', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    letter-spacing: 0.05em;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  /* Mobile adjustments for zoom modal */
  @media (max-width: 768px) {
    .zoom-modal-content {
      padding: 1rem;
    }
    
    .zoom-close-btn {
      top: 0.5rem;
      right: 0.5rem;
      width: 35px;
      height: 35px;
      font-size: 20px;
    }
    
    .zoom-prev-btn,
    .zoom-next-btn {
      width: 40px;
      height: 40px;
      font-size: 20px;
    }
    
    .zoom-navigation {
      padding: 0 0.5rem;
    }
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:general.product",
  "settings": [],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
