<!-- Success Notification -->
<div class="cart-success-notification" id="cart-success-notification">
  <div class="success-content">
    <div class="success-icon">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="20,6 9,17 4,12"/>
      </svg>
    </div>
    <div class="success-text">
      <span class="success-title">Item Successfully Reserved</span>
      <span class="success-subtitle">Your selection has been secured</span>
    </div>
  </div>
  <button class="success-close" onclick="hideSuccessNotification()">
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <line x1="18" y1="6" x2="6" y2="18"/>
      <line x1="6" y1="6" x2="18" y2="18"/>
    </svg>
  </button>
</div>

<!-- Cart Drawer -->
<div class="cart-drawer" id="cart-drawer">
  <!-- Cart Drawer Overlay -->
  <div class="cart-drawer-overlay" id="cart-drawer-overlay"></div>
  
  <!-- Cart Drawer Content -->
  <div class="cart-drawer-content">
    <!-- Cart Header -->
    <div class="cart-drawer-header">
      <div class="cart-header-content">
        <h2 class="cart-drawer-title">Reserved Items</h2>
        <p class="cart-drawer-subtitle">Your exclusive selections</p>
      </div>
      <button class="cart-drawer-close" id="cart-drawer-close" aria-label="Close cart">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"/>
          <line x1="6" y1="6" x2="18" y2="18"/>
        </svg>
      </button>
    </div>

    <!-- Cart Items -->
    <div class="cart-drawer-items" id="cart-drawer-items">
      <!-- Empty Cart State -->
      <div class="cart-empty" id="cart-empty" style="display: none;">
        <div class="empty-cart-icon">
          <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
            <circle cx="9" cy="21" r="1"/>
            <circle cx="20" cy="21" r="1"/>
            <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"/>
          </svg>
        </div>
        <h3 class="empty-cart-title">No Items Reserved</h3>
        <p class="empty-cart-text">Reserve your exclusive pieces now</p>
        <button class="continue-shopping-btn" onclick="closeCartDrawer()">Explore Collection</button>
      </div>

      <!-- Cart Items List -->
      <div class="cart-items-list" id="cart-items-list">
        <!-- Cart items will be populated here via JavaScript -->
      </div>
    </div>

    <!-- Cart Footer -->
    <div class="cart-drawer-footer" id="cart-drawer-footer" style="display: none;">
      <!-- Cart Totals -->
      <div class="cart-totals">
        <div class="cart-subtotal">
          <span class="subtotal-label">Reserved Total</span>
          <span class="subtotal-amount" id="cart-subtotal">$0.00</span>
        </div>
        <p class="cart-note">Items held for 15 minutes â€¢ Shipping calculated at checkout</p>
      </div>

      <!-- Cart Actions -->
      <div class="cart-actions">
        <a href="/cart" class="view-cart-btn">Review Reserved Items</a>
        <form action="/cart" method="post" novalidate class="cart-form">
          <button type="submit" name="add" class="checkout-btn" formaction="/checkout">
            <span class="btn-text">Secure Your Items</span>
            <span class="btn-icon">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
            </span>
          </button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Cart Item Template (hidden) -->
<template id="cart-item-template">
  <div class="cart-item" data-key="">
    <div class="cart-item-image">
      <img src="" alt="" loading="lazy">
    </div>
    <div class="cart-item-details">
      <h4 class="cart-item-title"></h4>
      <div class="cart-item-variant"></div>
      <div class="cart-item-price">
        <span class="item-price"></span>
      </div>
      <div class="cart-item-quantity">
        <button class="quantity-btn quantity-decrease" data-action="decrease">-</button>
        <span class="quantity-display"></span>
        <button class="quantity-btn quantity-increase" data-action="increase">+</button>
      </div>
    </div>
    <button class="cart-item-remove" aria-label="Remove item">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="3,6 5,6 21,6"/>
        <path d="M19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"/>
        <line x1="10" y1="11" x2="10" y2="17"/>
        <line x1="14" y1="11" x2="14" y2="17"/>
      </svg>
    </button>
  </div>
</template>

<script>
// Cart Drawer Functionality
let cartDrawer, cartDrawerOverlay, cartDrawerClose;
let cartEmpty, cartItemsList, cartDrawerFooter, cartSubtotal;

document.addEventListener('DOMContentLoaded', function() {
  // Initialize cart drawer elements
  cartDrawer = document.getElementById('cart-drawer');
  cartDrawerOverlay = document.getElementById('cart-drawer-overlay');
  cartDrawerClose = document.getElementById('cart-drawer-close');
  cartEmpty = document.getElementById('cart-empty');
  cartItemsList = document.getElementById('cart-items-list');
  cartDrawerFooter = document.getElementById('cart-drawer-footer');
  cartSubtotal = document.getElementById('cart-subtotal');

  // Event listeners
  if (cartDrawerClose) {
    cartDrawerClose.addEventListener('click', closeCartDrawer);
  }
  
  if (cartDrawerOverlay) {
    cartDrawerOverlay.addEventListener('click', closeCartDrawer);
  }

  // Close on escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && cartDrawer && cartDrawer.classList.contains('active')) {
      closeCartDrawer();
    }
  });

  // Load cart on page load
  loadCart();
});

// Open cart drawer
function openCartDrawer() {
  if (cartDrawer) {
    cartDrawer.classList.add('active');
    document.body.style.overflow = 'hidden';
    loadCart(); // Refresh cart contents
  }
}

// Close cart drawer
function closeCartDrawer() {
  if (cartDrawer) {
    cartDrawer.classList.remove('active');
    document.body.style.overflow = 'auto';
  }
}

// Load cart data
async function loadCart() {
  try {
    const response = await fetch('/cart.js');
    const cart = await response.json();
    renderCart(cart);
  } catch (error) {
    console.error('Error loading cart:', error);
  }
}

// Render cart contents
function renderCart(cart) {
  if (!cartItemsList || !cartEmpty || !cartDrawerFooter || !cartSubtotal) return;

  if (cart.items.length === 0) {
    // Show empty cart state
    cartEmpty.style.display = 'flex';
    cartItemsList.style.display = 'none';
    cartDrawerFooter.style.display = 'none';
  } else {
    // Show cart items
    cartEmpty.style.display = 'none';
    cartItemsList.style.display = 'block';
    cartDrawerFooter.style.display = 'block';

    // Render items
    cartItemsList.innerHTML = '';
    cart.items.forEach(item => {
      const cartItemElement = createCartItemElement(item);
      cartItemsList.appendChild(cartItemElement);
    });

    // Update subtotal
    cartSubtotal.textContent = formatMoney(cart.total_price);
  }

  // Update cart count in header
  updateCartCount(cart.item_count);
}

// Create cart item element
function createCartItemElement(item) {
  const template = document.getElementById('cart-item-template');
  const clone = template.content.cloneNode(true);
  
  const cartItem = clone.querySelector('.cart-item');
  cartItem.setAttribute('data-key', item.key);
  
  const img = clone.querySelector('.cart-item-image img');
  if (item.image) {
    img.src = item.image;
    img.alt = item.product_title;
  }
  
  clone.querySelector('.cart-item-title').textContent = item.product_title;
  clone.querySelector('.cart-item-variant').textContent = item.variant_title || '';
  clone.querySelector('.item-price').textContent = formatMoney(item.line_price);
  clone.querySelector('.quantity-display').textContent = item.quantity;
  
  // Add event listeners
  const decreaseBtn = clone.querySelector('.quantity-decrease');
  const increaseBtn = clone.querySelector('.quantity-increase');
  const removeBtn = clone.querySelector('.cart-item-remove');
  
  decreaseBtn.addEventListener('click', () => updateQuantity(item.key, item.quantity - 1));
  increaseBtn.addEventListener('click', () => updateQuantity(item.key, item.quantity + 1));
  removeBtn.addEventListener('click', () => removeItem(item.key));
  
  return clone;
}

// Update item quantity
async function updateQuantity(key, quantity) {
  if (quantity < 1) {
    removeItem(key);
    return;
  }

  try {
    const response = await fetch('/cart/change.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        id: key,
        quantity: quantity
      })
    });
    
    const cart = await response.json();
    renderCart(cart);
  } catch (error) {
    console.error('Error updating quantity:', error);
  }
}

// Remove item from cart
async function removeItem(key) {
  try {
    const response = await fetch('/cart/change.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        id: key,
        quantity: 0
      })
    });
    
    const cart = await response.json();
    renderCart(cart);
  } catch (error) {
    console.error('Error removing item:', error);
  }
}

// Add item to cart
async function addToCart(formData) {
  try {
    const response = await fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formData)
    });
    
    if (response.ok) {
      showSuccessNotification();
      setTimeout(() => {
        openCartDrawer();
      }, 1000);
      return await response.json();
    } else {
      throw new Error('Failed to add item to cart');
    }
  } catch (error) {
    console.error('Error adding to cart:', error);
    throw error;
  }
}

// Show success notification
function showSuccessNotification() {
  const notification = document.getElementById('cart-success-notification');
  if (notification) {
    notification.classList.add('active');
    
    // Auto-hide after 3 seconds
    setTimeout(() => {
      hideSuccessNotification();
    }, 3000);
  }
}

// Hide success notification
function hideSuccessNotification() {
  const notification = document.getElementById('cart-success-notification');
  if (notification) {
    notification.classList.remove('active');
  }
}

// Update cart count in header
function updateCartCount(count) {
  const cartCountElement = document.querySelector('.cart-count');
  if (cartCountElement) {
    cartCountElement.textContent = count;
    cartCountElement.style.display = count > 0 ? 'flex' : 'none';
  }
}

// Format money
function formatMoney(cents) {
  return '$' + (cents / 100).toFixed(2);
}

// Make functions globally available
window.openCartDrawer = openCartDrawer;
window.closeCartDrawer = closeCartDrawer;
window.addToCart = addToCart;
window.showSuccessNotification = showSuccessNotification;
window.hideSuccessNotification = hideSuccessNotification;
</script>

{% stylesheet %}
  /* Success Notification */
  .cart-success-notification {
    position: fixed;
    top: 2rem;
    right: 2rem;
    background: linear-gradient(135deg, 
      rgba(34, 197, 94, 0.95) 0%, 
      rgba(22, 163, 74, 0.98) 100%);
    color: var(--color-foreground);
    border-radius: 8px;
    padding: 1rem 1.5rem;
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.3),
      0 4px 16px rgba(34, 197, 94, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.3);
    backdrop-filter: blur(20px);
    z-index: 10000;
    transform: translateX(100%);
    opacity: 0;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    min-width: 300px;
    max-width: 400px;
  }
  
  .cart-success-notification.active {
    transform: translateX(0);
    opacity: 1;
  }
  
  .success-content {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  
  .success-icon {
    flex-shrink: 0;
    width: 40px;
    height: 40px;
    background: rgba(255, 255, 255, 0.15);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .success-icon svg {
    color: var(--color-foreground);
  }
  
  .success-text {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .success-title {
    font-family: 'Oswald', sans-serif;
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-foreground);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .success-subtitle {
    font-family: 'Oswald', sans-serif;
    font-size: 0.85rem;
    font-weight: 300;
    color: var(--color-foreground);
    opacity: 0.9;
  }
  
  .success-close {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background: transparent;
    border: none;
    color: var(--color-foreground);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 50%;
    transition: all 0.3s ease;
    opacity: 0.7;
  }
  
  .success-close:hover {
    opacity: 1;
    background-color: rgba(255, 255, 255, 0.1);
  }

  /* Cart Drawer Styles */
  .cart-drawer {
    position: fixed;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .cart-drawer.active {
    opacity: 1;
    pointer-events: all;
  }
  
  .cart-drawer-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .cart-drawer.active .cart-drawer-overlay {
    opacity: 1;
  }
  
  .cart-drawer-content {
    position: absolute;
    top: 0;
    right: 0;
    width: 100%;
    max-width: 420px;
    height: 100%;
    background-color: var(--color-background);
    box-shadow: -8px 0 32px rgba(0, 0, 0, 0.4);
    transform: translateX(100%);
    transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }
  
  .cart-drawer.active .cart-drawer-content {
    transform: translateX(0);
  }
  
  /* Cart Header */
  .cart-drawer-header {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    padding: 1.5rem 1.5rem 1rem 1.5rem;
    border-bottom: 1px solid rgba(215, 38, 56, 0.1);
    background: linear-gradient(180deg, 
      rgba(215, 38, 56, 0.02) 0%, 
      transparent 100%);
  }
  
  .cart-header-content {
    flex: 1;
  }
  
  .cart-drawer-title {
    font-family: 'Oswald', sans-serif;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--color-foreground);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin: 0 0 0.25rem 0;
  }
  
  .cart-drawer-subtitle {
    font-family: 'Oswald', sans-serif;
    font-size: 0.85rem;
    font-weight: 300;
    color: var(--color-foreground);
    opacity: 0.7;
    margin: 0;
  }
  
  .cart-drawer-close {
    background: transparent;
    border: none;
    color: var(--color-foreground);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    transition: all 0.3s ease;
    opacity: 0.7;
  }
  
  .cart-drawer-close:hover {
    opacity: 1;
    background-color: rgba(215, 38, 56, 0.1);
  }
  
  /* Cart Items */
  .cart-drawer-items {
    flex: 1;
    overflow-y: auto;
    padding: 1rem 0;
  }
  
  /* Empty Cart */
  .cart-empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem 1.5rem;
    text-align: center;
    height: 100%;
  }
  
  .empty-cart-icon {
    margin-bottom: 1.5rem;
    opacity: 0.3;
  }
  
  .empty-cart-icon svg {
    color: var(--color-foreground);
  }
  
  .empty-cart-title {
    font-family: 'Oswald', sans-serif;
    font-size: 1.1rem;
    font-weight: 500;
    color: var(--color-foreground);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.5rem;
  }
  
  .empty-cart-text {
    font-family: 'Oswald', sans-serif;
    font-size: 0.9rem;
    font-weight: 300;
    color: var(--color-foreground);
    opacity: 0.7;
    margin-bottom: 1.5rem;
  }
  
  .continue-shopping-btn {
    background: linear-gradient(135deg, 
      rgba(215, 38, 56, 0.9) 0%, 
      rgba(160, 27, 42, 0.95) 100%);
    color: var(--color-foreground);
    font-family: 'Oswald', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    border: none;
    border-radius: 6px;
    padding: 0.75rem 1.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .continue-shopping-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(215, 38, 56, 0.3);
  }
  
  /* Cart Items List */
  .cart-items-list {
    padding: 0 1.5rem;
  }
  
  .cart-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 1rem 0;
    border-bottom: 1px solid rgba(215, 38, 56, 0.05);
    position: relative;
  }
  
  .cart-item:last-child {
    border-bottom: none;
  }
  
  .cart-item-image {
    flex-shrink: 0;
    width: 80px;
    height: 80px;
    background-color: var(--color-background-ui);
    border-radius: 4px;
    overflow: hidden;
    border: 1px solid rgba(215, 38, 56, 0.05);
  }
  
  .cart-item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .cart-item-details {
    flex: 1;
    min-width: 0;
  }
  
  .cart-item-title {
    font-family: 'Oswald', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--color-foreground);
    margin-bottom: 0.25rem;
    line-height: 1.3;
  }
  
  .cart-item-variant {
    font-family: 'Oswald', sans-serif;
    font-size: 0.8rem;
    font-weight: 300;
    color: var(--color-foreground);
    opacity: 0.6;
    margin-bottom: 0.5rem;
  }
  
  .cart-item-price {
    margin-bottom: 0.75rem;
  }
  
  .item-price {
    font-family: 'Oswald', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--color-foreground);
  }
  
  .cart-item-quantity {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .quantity-btn {
    width: 28px;
    height: 28px;
    background-color: var(--color-background-ui);
    border: 1px solid rgba(215, 38, 56, 0.1);
    border-radius: 4px;
    color: var(--color-foreground);
    font-size: 0.9rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .quantity-btn:hover {
    background-color: rgba(215, 38, 56, 0.1);
    border-color: rgba(215, 38, 56, 0.2);
  }
  
  .quantity-display {
    font-family: 'Oswald', sans-serif;
    font-size: 0.9rem;
    font-weight: 400;
    color: var(--color-foreground);
    min-width: 20px;
    text-align: center;
  }
  
  .cart-item-remove {
    position: absolute;
    top: 0.5rem;
    right: 0;
    background: transparent;
    border: none;
    color: var(--color-foreground);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: all 0.3s ease;
    opacity: 0.5;
  }
  
  .cart-item-remove:hover {
    opacity: 1;
    background-color: rgba(255, 0, 0, 0.1);
    color: #ff4444;
  }
  
  /* Cart Footer */
  .cart-drawer-footer {
    border-top: 1px solid rgba(215, 38, 56, 0.1);
    padding: 1.5rem;
    background: linear-gradient(180deg, 
      transparent 0%, 
      rgba(215, 38, 56, 0.02) 100%);
  }
  
  .cart-totals {
    margin-bottom: 1.5rem;
  }
  
  .cart-subtotal {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }
  
  .subtotal-label {
    font-family: 'Oswald', sans-serif;
    font-size: 1rem;
    font-weight: 500;
    color: var(--color-foreground);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .subtotal-amount {
    font-family: 'Oswald', sans-serif;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--color-foreground);
  }
  
  .cart-note {
    font-family: 'Oswald', sans-serif;
    font-size: 0.75rem;
    font-weight: 300;
    color: var(--color-foreground);
    opacity: 0.6;
    margin: 0;
  }
  
  .cart-actions {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .view-cart-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem 1.5rem;
    background-color: transparent;
    color: var(--color-foreground);
    font-family: 'Oswald', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    text-decoration: none;
    border: 2px solid rgba(215, 38, 56, 0.2);
    border-radius: 6px;
    transition: all 0.3s ease;
  }
  
  .view-cart-btn:hover {
    background-color: rgba(215, 38, 56, 0.1);
    border-color: rgba(215, 38, 56, 0.3);
  }
  
  .checkout-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 1rem 1.5rem;
    width: 100%;
    background: linear-gradient(135deg, 
      rgba(215, 38, 56, 0.9) 0%, 
      rgba(160, 27, 42, 0.95) 100%);
    color: var(--color-foreground);
    font-family: 'Oswald', sans-serif;
    font-size: 1rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(215, 38, 56, 0.3);
  }
  
  .checkout-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(215, 38, 56, 0.4);
  }
  
  /* Responsive Design */
  @media (max-width: 480px) {
    .cart-drawer-content {
      max-width: 100%;
    }
    
    .cart-drawer-header {
      padding: 1rem;
    }
    
    .cart-drawer-footer {
      padding: 1rem;
    }
    
    .cart-items-list {
      padding: 0 1rem;
    }
  }
{% endstylesheet %}